<?php


namespace petrjirasek\AlgoliaSearch;

use Nette;
use Nette\PhpGenerator as Code;

/**
 * @author Petr JirÃ¡sek
 */
class Client extends \AlgoliaSearch\Client
{
    /**
     * @var string Prefix of indices
     */
    private $prefix;

    /**
     * @inheritdoc
     */
    public function __construct($applicationID, $apiKey, $prefix, $hostsArray = null, $options = array())
    {
        parent::__construct($applicationID, $apiKey, $hostsArray, $options);

        $this->prefix = $prefix;
    }

    /**
     * @inheritdoc
     */
    public function multipleQueries($queries, $indexNameKey = "indexName", $strategy = "none")
    {
        return parent::multipleQueries($queries, $this->getPrefixedIndexName($indexNameKey), $strategy);
    }

    /**
     * @inheritdoc
     */
    public function initIndex($indexName)
    {
        return parent::initIndex($this->getPrefixedIndexName($indexName));
    }

    /**
     * @inheritdoc
     */
    public function moveIndex($srcIndexName, $dstIndexName)
    {
        return parent::moveIndex($this->getPrefixedIndexName($srcIndexName), $this->getPrefixedIndexName($dstIndexName));
    }

    /**
     * @inheritdoc
     */
    public function copyIndex($srcIndexName, $dstIndexName)
    {
        return parent::copyIndex($this->getPrefixedIndexName($srcIndexName), $this->getPrefixedIndexName($dstIndexName));
    }

    /**
     * @inheritdoc
     */
    public function deleteIndex($indexName)
    {
        return parent::deleteIndex($this->getPrefixedIndexName($indexName));
    }

    /**
     * @inheritdoc
     */
    public function addUserKey($obj, $validity = 0, $maxQueriesPerIPPerHour = 0, $maxHitsPerQuery = 0, $indexes = null)
    {
        if ($indexes) {
            $indexes = array_map(function ($index) {
                return $this->getPrefixedIndexName($index);
            }, $indexes);
        }

        return parent::addUserKey($obj, $validity, $maxQueriesPerIPPerHour, $maxHitsPerQuery, $indexes); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritdoc
     */
    public function updateUserKey($key, $obj, $validity = 0, $maxQueriesPerIPPerHour = 0, $maxHitsPerQuery = 0, $indexes = null)
    {
        if ($indexes) {
            $indexes = array_map(function ($index) {
                return $this->getPrefixedIndexName($index);
            }, $indexes);
        }

        return parent::updateUserKey($key, $obj, $validity, $maxQueriesPerIPPerHour, $maxHitsPerQuery, $indexes); // TODO: Change the autogenerated stub
    }

    /**
     * Returns index name including prefix.
     *
     * @param $indexName string name of index to be prefixed
     * @return string
     */
    private function getPrefixedIndexName($indexName)
    {
        return $this->prefix . $indexName;
    }
}